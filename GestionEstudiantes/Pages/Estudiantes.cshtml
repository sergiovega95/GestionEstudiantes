@page
@model GestionEstudiantes.Pages.EstudiantesModel
@using EstudiantesCore.Dtos
@using EstudiantesCore.Entidades
@{
}

@Html.AntiForgeryToken()

@using DevExtreme.AspNet.Mvc


<div class="divalumnos">       
    <div id="divgridEstudiantes" class="card">
        <div class="card-body">

            <div>
                @(Html.DevExtreme().Button().Text("Nuevo alumno").OnClick("NuevoEstudiante").Icon("add").Type(ButtonType.Default))
            </div>

            @(Html.DevExtreme().DataGrid<Estudiantes>()
                    .ID("TableEstudiantes")
                     .SearchPanel(searchPanel => searchPanel
                     .Visible(true)                     
                     .Width(240)
                     .Placeholder("Buscar...")
                    )
                    .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto)
                       )
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .RowAlternationEnabled(true)
                    .Export(s => s.Enabled(true))
                    .AllowColumnReordering(true)
                    .AllowColumnResizing(true)
                    .Paging(s => s.Enabled(true).PageSize(5))
                    .DataSource(s => s.RemoteController().LoadUrl("/Estudiantes?handler=ObtenerEstudiantes"))
                    .Columns(s =>
                    {
                        s.AddFor(q => q.TipoDocumento.Id).Caption("Tipo de documento").Lookup(q => q.DataSource(f => f.RemoteController().LoadUrl("/Estudiantes?handler=TipoDocumento").Key("Id")).DisplayExpr("Nombre").ValueExpr("Id"));
                        s.AddFor(q => q.Documento).Caption("Documento");
                        s.AddFor(q => q.Nombre).Caption("Nombres");
                        s.AddFor(q => q.Apellido).Caption("Apellidos");
                        s.AddFor(q => q.Estado.Id).Caption("Estado").Lookup(q => q.DataSource(f => f.RemoteController().LoadUrl("/Estudiantes?handler=Estados").Key("Id")).DisplayExpr("Nombre").ValueExpr("Id"));
                        s.Add().Visible(true)
                        .Type(GridCommandColumnType.Buttons)
                        .Width(110)
                        .Buttons(b =>
                        {

                           b.Add()
                           .Hint("Editar estudiante")
                           .Icon("edit").
                           OnClick("EditStudentFromGrid");

                           b.Add()
                           .Hint("ver estudiante")
                           .Icon("info").
                           OnClick("VerEstudianteFromGrid");

                        });

                    })

            )
        </div>
    </div>
    <div class="card" style="display:none" id="divformEstudiante">
       <div class="card-body">
           <div>
            @(Html.DevExtreme().Button().Text("Volver").OnClick("EsconderFormulario").Icon("arrowleft").Type(ButtonType.Default))
           </div>
           
           <div class="mt-4">
                @(Html.DevExtreme().Form<Estudiantes>()
                .ID("FormEstudiante")
                .ColCount(12)
                .Items(items =>
                {

                    items.AddSimpleFor(f => f.Id).Visible(false);
                    items.AddSimpleFor(g => g.TipoDocumento).ColSpan(4)
                    .ValidationRules(s => s.AddRequired().Message("Campo requerido"))
                    .Label(d => d.Location(FormLabelLocation.Top).Text("Tipo de documento"))
                    .Editor(f => f.SelectBox().Placeholder("Seleccione su tipo de documento").DisplayExpr("Nombre")
                    .DataSource(d => d.RemoteController().LoadUrl("/Estudiantes?handler=TipoDocumento").Key("Id")));


                    items.AddSimpleFor(m => m.Documento).ColSpan(4)
                    .Label(d => d.Location(FormLabelLocation.Top).Text("Documento"))
                    .ValidationRules(v => v.AddRequired().Message("El documento es requerido"))
                    .ValidationRules(f => f.AddNumeric().Message("Solo se permiten números"))
                    .ValidationRules(g => g.AddAsync().ValidationCallback("ValidarIdentificacionUnica").Reevaluate(true).Message("Ya existe un usuario registrado con este documento"))
                    .Editor(s => s.TextBox().MaxLength(20));


                    items.AddSimpleFor(m => m.Nombre)
                    .ValidationRules(v => v.AddRequired().Message("El nombre es requerido"))                    
                    .Label(f => f.Location(FormLabelLocation.Top)
                    .Text("Nombres")).ColSpan(4)
                    .Editor(d => d.TextBox().MaxLength(100));

                    items.AddSimpleFor(m => m.Apellido).ColSpan(4)
                    .ValidationRules(v => v.AddRequired().Message("El apellido es requerido"))
                    .Label(f => f.Location(FormLabelLocation.Top)
                    .Text("Apellidos"))
                    .Editor(d => d.TextBox().MaxLength(100));


                    items.AddSimpleFor(g => g.Sexo).ColSpan(4)
                    .ValidationRules(s => s.AddRequired().Message("Campo requerido"))
                    .Label(d => d.Location(FormLabelLocation.Top).Text("Sexo"))
                    .Editor(f => f.SelectBox().Placeholder("Seleccione un sexo").DataSource(d => d.Array()
                    .Data(new List<string>() { "M", "F" })));


                    items.AddSimpleFor(f => f.FechaNacimiento).ColSpan(4)
                    .Label(d => d.Location(FormLabelLocation.Top).Text("Fecha de nacimiento"))
                    .ValidationRules(s => s.AddRequired().Message("Campo requerido"))
                    .Editor(f => f.DateBox().Max(DateTime.Now).DateSerializationFormat("yyyy-MM-dd").DisplayFormat("dd/MM/yyyy"));

                    items.AddSimpleFor(m => m.Email).ColSpan(4)
                    .ValidationRules(v => v.AddRequired().Message("El email es requerido"))
                    .ValidationRules(g => g.AddEmail().Message("Ingrese un email valido"))
                    .Label(f => f.Location(FormLabelLocation.Top)
                    .Text("Email"))
                    .Editor(d => d.TextBox().MaxLength(200));

                    items.AddSimpleFor(m => m.Telefono).ColSpan(4)
                    .ValidationRules(v => v.AddRequired().Message("El telefono es requerido"))
                    .ValidationRules(g => g.AddNumeric().Message("Solo se permiten números"))
                    .Label(f => f.Location(FormLabelLocation.Top)
                    .Text("Telefono"))
                    .Editor(d => d.TextBox().MaxLength(20));

                    items.AddSimpleFor(m => m.Direccion).ColSpan(4)
                    .ValidationRules(v => v.AddRequired().Message("El telefono es requerido"))
                    .Label(f => f.Location(FormLabelLocation.Top)
                    .Text("Dirección"))
                    .Editor(d => d.TextArea().MaxLength(500));

                    items.AddSimpleFor(f => f.FechaIngreso).ColSpan(4)
                    .Label(d => d.Location(FormLabelLocation.Top).Text("Fecha de ingreso"))
                    .ValidationRules(s => s.AddRequired().Message("Campo requerido"))
                    .Editor(f => f.DateBox().Max(DateTime.Now).DateSerializationFormat("yyyy-MM-dd").DisplayFormat("dd/MM/yyyy"));

                    
                    items.AddEmpty().ColSpan(4);

                    items.AddButton().ColSpan(4).VerticalAlignment(VerticalAlignment.Bottom).ButtonOptions(s => s.Icon("save").ID("btnGuardar").Type(ButtonType.Default).OnClick("Salvar").Text("Guardar"));
                }))
           </div>            
       </div>
    </div>
</div>


@section Scripts
{
    <script src="~/js/Estudiantes.js"></script>
}