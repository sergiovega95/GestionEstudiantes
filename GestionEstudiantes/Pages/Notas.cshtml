@page
@model GestionEstudiantes.Pages.NotasModel
@using EstudiantesCore.Dtos
@using EstudiantesCore.Entidades
@{
}

@Html.AntiForgeryToken()

@using DevExtreme.AspNet.Mvc


<div class="divalumnos">

    <div class="card">
        <div class="card-body">

            @(Html.DevExtreme().Form()
                    .ColCount(12)
                    .ID("formBusquedaEstudiante")
                    .Items(
                    i =>
                    {

                        i.AddSimple().ValidationRules(s => s.AddRequired().Message("Ingrese el documento del estudiante")).ValidationRules(h => h.AddNumeric().Message("Solo se permiten números")).Label(l => l.Text("Buscar estudiante")).Editor(s => s.TextBox().ID("txtestudiante").MaxLength(30).Placeholder("Ingrese el documento del estudiante")).ColSpan(10);
                        i.AddButton().ColSpan(2).ButtonOptions(h => h.Icon("search").Text("Buscar").OnClick("BuscarEstudiante").Width("100%").Type(ButtonType.Default)).ColSpan(2);
                    })

            )

            <div class="mt-2">


                @(Html.DevExtreme().Form<EstudiantesXMateria>()
                .ColCount(12)
                .ID("formmateriasestudiante")
                .Visible(false)
                .Items(
                i =>
                {

                    i.AddSimple().ColSpan(12).Label(l => l.Text("Materías")).Editor(s => s.SelectBox().ID("selectMateria").OnItemClick("BuscarNotas").DataSource(r => r.RemoteController().LoadUrl("/Notas?handler=ObtenerMateriasMatriculadasEstudiante").OnBeforeSend("MandarIdEstudiante").Key("Id")).DisplayExpr("Materia.Nombre"));
                })

                )

            </div>
            <div class="mt-4">

                @(Html.DevExtreme().DataGrid<Notas>()
                .ID("TableNotas")
                .ShowRowLines(true)
                .Export(s => s.Enabled(true))
                .Editing(s => s.AllowAdding(true).AllowUpdating(true).UseIcons(true).AllowDeleting(true).Mode(GridEditMode.Row))
                .RowAlternationEnabled(true)
                .ShowBorders(true)
                .ShowColumnLines(true)
                .NoDataText("No se encontraron notas registradas")
                .FilterRow(s => s.Visible(true))
                .ShowRowLines(true)
                .AllowColumnReordering(true)
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .Paging(s => s.Enabled(true).PageSize(10))
                .SearchPanel(d => d.Visible(true))
                .DataSource(s => s.RemoteController().UpdateUrl("/Notas?handler=ActualizarNota").DeleteUrl("/Notas?handler=BorrarNota").InsertUrl("/Notas?handler=CrearNota").LoadUrl("/Notas?handler=CargarNotas").OnBeforeSend("MandarIdMateriaEstudiante").Key("Id"))
                .Columns(s =>
                {

                    s.AddFor(q => q.Nombre).Caption("Nombre").FormItem(f => f.Editor(e => e.TextBox().MaxLength(200)));
                    s.AddFor(q => q.Nota).Caption("Nota").FormItem(f => f.Editor(e => e.NumberBox().Min(0).Max(5).Step(0.1).UseLargeSpinButtons(true)));
                    s.AddFor(r => r.Porcentaje).Caption("Porcentaje").FormItem(f => f.Editor(e => e.NumberBox().Min(0).Max(100).UseLargeSpinButtons(true)));

                })

                )

            </div>
        </div>
    </div>


</div>


@section Scripts
    {
    <script src="~/js/Notas.js"></script>
}
